// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema
// Attributes: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#attributes
// Attributes functions: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#attribute-functions
// Relations: https://www.prisma.io/docs/concepts/components/prisma-schema/relations
// Scalar types: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#model-field-scalar-types

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

model Security {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  credential    String    @unique
  code          String?
  codeExpiresIn DateTime?
  validated     Boolean   @default(false)
}

model Permission {
  id    String      @id @default(auto()) @map("_id") @db.ObjectId
  title Permissions @unique
}

model Admin {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  role          AccountRole   @default(admin)
  name          String
  email         String        @unique
  password      String
  status        AccountStatus
  imageUrl      String?
  code          String?
  codeExpiresIn DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CategoryHome {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  imgSrc String
  name   String
}

model CategoryVideos {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  value String
}

model Campaigns {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  texto         String
  title         String
  price         String
  imgSrc        String
  desc          String
  secondaryImgs SecondaryImgs[]
}

model CategoryHomeContent {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  texto         String
  title         String
  imgSrc        String
  desc          String
  secondaryImgs SecondaryImgs[]
  btnText       String
  redirectLink  String
  filter        String
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  role          AccountRole   @default(user)
  name          String
  email         String        @unique
  password      String
  status        AccountStatus
  imageUrl      String?
  bornDate      String?
  cellphone     String?
  code          String?
  codeExpiresIn DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Text {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      TextType
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Permissions {
  configuracoes
  faqs
  textos
}

enum AccountRole {
  admin
  user
}

enum AccountStatus {
  ativo
  inativo
  pendente
}

enum TextType {
  about
  privacy
  terms
}

model Videos {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  views        Int       @default(0)
  url          String
  name         String
  authorId     Int
  description  String
  likes        Int       @default(0)
  dislikes     Int       @default(0)
  thumbnailUrl String
  tags         String[]
  comments     Comment[]
}

model Comment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  time    String
  comment String
  answers Answer[]
  video   Videos?  @relation(fields: [videoId], references: [id])
  videoId String?  @db.ObjectId
}

model Answer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  answer    String
  name      String
  time      String
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @db.ObjectId
}

type SecondaryImgs {
  imgSrc String
}
